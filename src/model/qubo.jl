# -*- QUBO Validation -*-

√ó(x::S, y::S) where {S} = Set{S}([x, y])
√ó(x::S, y::Set{S}) where {S} = union!(y, x)
√ó(x::Set{S}, y::S) where {S} = union!(x, y)
√ó(x::Set{S}, y::Set{S}) where {S} = union!(x, y)

@doc raw"""
    isqubo(T::Type{<:Any}, model::MOI.ModelLike)
    isqubo(model::MOI.ModelLike)
    isqubo(::Model)
    isqubo(::QUBOModel)

Tells if `model` is ready as QUBO Model. A few conditions must be met:
    1. All variables must be binary (VariableIndex-in-ZeroOne)
    2. No other constraints are allowed
    3. The objective function must be either ScalarQuadratic, ScalarAffine or VariableIndex
"""
function isqubo(T::Type{<:Any}, model::MOI.ModelLike)
    F = MOI.get(model, MOI.ObjectiveFunctionType()) 
    
    if !(F === SQF{T} || F === SAF{T} || F === VI)
        return false
    end

    # List of Variables
    v = Set{VI}(MOI.get(model, MOI.ListOfVariableIndices()))

    for (F, S) in MOI.get(model, MOI.ListOfConstraints())
        if !(F === VI && S === MOI.ZeroOne)
            # Non VariableIndex-in-ZeroOne Constraint
            return false
        else
            for c·µ¢ in MOI.get(model, MOI.ListOfConstraintIndices{F, S}())
                v·µ¢ = MOI.get(model, MOI.ConstraintFunction(), c·µ¢)
                
                # Account for variable as binary
                delete!(v, v·µ¢)
            end

            if !isempty(v)
                # Some variable is not covered by binary constraints
                return false
            end
        end
    end

    return true
end

function isqubo(model::MOI.ModelLike)
    return isqubo(Float64, model)
end

isqubo(::QUBOModel) = true
isqubo(::VirtualQUBOModel) = true


function discretize(ùï°::‚Ñ±{T}; œµ::T) where {T}
    ùìÄ = collect(keys(ùï°))
    ùìã = [ùï°[k] for k in ùìÄ]
    
    ùìá = rationalize.(ùìã; tol=œµ)
    ùìà = numerator.(ùìá .* lcm(denominator.(ùìá)))

    return ‚Ñ±{T}(Dict{Set{VI}, T}(k => ùìà[i] for (i, k) in enumerate(ùìÄ)))
end

# -*- toqubo: MOI.ModelLike -> QUBO.Model -*-
function toqubo(T::Type{<: S}, model::MOI.ModelLike, optimizer::Union{Nothing, MOI.AbstractOptimizer}=nothing; œµ::S=zero(S)) where {S}
    virt_model = VirtualQUBOModel{T}(optimizer; œµ=œµ)

    # -*- Copy To: PreQUBOModel + Trigger Bridges -*-
    MOI.copy_to(virt_model.preq_model, model)

    toqubo!(virt_model)
 
    return virt_model
end

function toqubo(model::MOI.ModelLike, optimizer::Union{Nothing, MOI.AbstractOptimizer}=nothing; œµ::Float64=0.0)
    return toqubo(Float64, model, optimizer; œµ=œµ)
end

# -*- :: toqubo!(...) :: -*-
# ::: QUBO Conversion :::
# -*- From ModelLike to QUBO -*-

"""
"""
function toqubo!(‚Ñ≥::VirtualQUBOModel{T}) where {T}

    # -*- Support Validation -*-
    # supported_objective(‚Ñ≥)
    # supported_constraints(‚Ñ≥)

    # :: Problem Variables ::
    toqubo_variables!(‚Ñ≥)

    # :: Objective Analysis ::
    F = MOI.get(‚Ñ≥, MOI.ObjectiveFunctionType())

    toqubo_objective!(‚Ñ≥, F)

    # :: Constraint Analysis ::

    for (F, S) in MOI.get(‚Ñ≥, MOI.ListOfConstraintTypesPresent())
        toqubo_constraint!(‚Ñ≥, F, S)
    end

    toqubo_sense!(‚Ñ≥)

    # -*- Objective Function Assembly -*-
    Q = Vector{SQT{T}}()
    a = Vector{SAT{T}}()
    b = zero(T)

    œÅ = (Œî(‚Ñ≥.‚Ñç‚ÇÄ) + one(T)) / one(T)

    if MOI.get(‚Ñ≥, MOI.ObjectiveSense()) === MOI.MAX_SENSE
        ‚Ñ≥.‚Ñç = ‚Ñ≥.‚Ñç‚ÇÄ - œÅ * sum(‚Ñ≥.‚Ñç·µ¢)  # Total Energy
    else
        ‚Ñ≥.‚Ñç = ‚Ñ≥.‚Ñç‚ÇÄ + œÅ * sum(‚Ñ≥.‚Ñç·µ¢)  # Total Energy
    end

    for (œâ, c) in ‚Ñ≥.‚Ñç
        n = length(œâ)

        if n == 0
            b += c
        elseif n == 1
            push!(a, SAT{T}(c, œâ...))
        elseif n == 2
            push!(Q, SQT{T}(c, œâ...))
        else
            error("Degree reduction failed!")
        end
    end

    MOI.set(
        ‚Ñ≥.qubo_model,
        MOI.ObjectiveFunction{SQF{T}}(),
        SQF{T}(Q, a, b)
    )

    return ‚Ñ≥
end

function toqubo_sense!(‚Ñ≥::VirtualQUBOModel)
    MOI.set(‚Ñ≥.qubo_model, MOI.ObjectiveSense(), MOI.get(‚Ñ≥, MOI.ObjectiveSense()))
end

# -*- Variables -*-
function toqubo_variables!(‚Ñ≥::VirtualQUBOModel{T}) where {T}
    # ::: Variable Analysis :::

    # Set of all source variables
    Œ© = Set{VI}(MOI.get(‚Ñ≥, MOI.ListOfVariableIndices()))

    ùïã = Union{Missing, T}

    # Variable Sets and Bounds (Boolean, Integer, Real)
    ùîπ = Set{VI}()
    ‚Ñ§ = Dict{VI, Tuple{ùïã, ùïã}}()
    ‚Ñù = Dict{VI, Tuple{ùïã, ùïã}}()

    for c·µ¢ in MOI.get(‚Ñ≥, MOI.ListOfConstraintIndices{VI, MOI.ZeroOne}())
        # -*- Binary Variable üòÑ -*-
        x·µ¢ = MOI.get(‚Ñ≥, MOI.ConstraintFunction(), c·µ¢)

        # Add to set
        push!(ùîπ, x·µ¢)
    end

    for c·µ¢ in MOI.get(‚Ñ≥, MOI.ListOfConstraintIndices{VI, MOI.Integer}())
        # -*- Integer Variable ü§î -*-
        x·µ¢ = MOI.get(‚Ñ≥, MOI.ConstraintFunction(), c·µ¢)

        # Add to dict as unbounded
        ‚Ñ§[x·µ¢] = (missing, missing)
    end

    for x·µ¢ in setdiff(Œ©, ùîπ, ‚Ñ§)
        # -*- Real Variable üò¢ -*-
        ‚Ñù[x·µ¢] = (missing, missing)
    end

    for c·µ¢ in MOI.get(‚Ñ≥, MOI.ListOfConstraintIndices{VI, MOI.Interval}())
        # -*- Interval üòÑ -*-
        x·µ¢ = MOI.get(‚Ñ≥, MOI.ConstraintFunction(), c·µ¢)
        I·µ¢ = MOI.get(‚Ñ≥, MOI.ConstraintSet(), c·µ¢) 

        a·µ¢ = I·µ¢.lower
        b·µ¢ = I·µ¢.upper

        if haskey(‚Ñ§, x·µ¢)
            ‚Ñ§[x·µ¢] = (a·µ¢, b·µ¢)
        elseif haskey(‚Ñù, x·µ¢)
            ‚Ñù[x·µ¢] = (a·µ¢, b·µ¢)
        end
    end

    for c·µ¢ in MOI.get(‚Ñ≥, MOI.ListOfConstraintIndices{VI, MOI.LessThan}())
        # -*- Upper Bound ü§î -*-
        x·µ¢ = MOI.get(‚Ñ≥, MOI.ConstraintFunction(), c·µ¢)
        I·µ¢ = MOI.get(‚Ñ≥, MOI.ConstraintSet(), c·µ¢) 

        b·µ¢ = I·µ¢.upper

        if haskey(‚Ñ§, x·µ¢)
            ‚Ñ§[x·µ¢] = (‚Ñ§[x·µ¢][0], b·µ¢)
        elseif haskey(‚Ñù, x·µ¢)
            ‚Ñù[x·µ¢] = (‚Ñù[x·µ¢][0], b·µ¢)
        end
    end

    for c·µ¢ in MOI.get(‚Ñ≥, MOI.ListOfConstraintIndices{VI, MOI.GreaterThan}())
        # -*- Lower Bound ü§î -*-
        x·µ¢ = MOI.get(‚Ñ≥, MOI.ConstraintFunction(), c·µ¢)
        I·µ¢ = MOI.get(‚Ñ≥, MOI.ConstraintSet(), c·µ¢)

        a·µ¢ = I·µ¢.lower

        if haskey(‚Ñ§, x·µ¢)
            ‚Ñ§[x·µ¢] = (a·µ¢, ‚Ñ§[x·µ¢][1])
        elseif haskey(‚Ñù, x·µ¢)
            ‚Ñù[x·µ¢] = (a·µ¢, ‚Ñ§[x·µ¢][1])
        end
    end


    # -*- Discretize Real Ones ü§î -*-
    for (x·µ¢, (a·µ¢, b·µ¢)) in ‚Ñù
        if a·µ¢ === missing || b·µ¢ === missing
            error("Unbounded variable $x·µ¢ ‚àà ‚Ñù")
        else
            bits = 3 # TODO: Solve this bit-guessing magic???
            name = Symbol(MOI.get(‚Ñ≥, MOI.VariableName(), x·µ¢))
            expand‚Ñù!(‚Ñ≥, x·µ¢; Œ±=a·µ¢, Œ≤=b·µ¢, name=name, bits=bits)
        end
    end

    # -*- Discretize Integer Variables ü§î -*-
    for (x·µ¢, (a·µ¢, b·µ¢)) in ‚Ñ§
        if a·µ¢ === missing || b·µ¢ === missing
            error("Unbounded variable $x·µ¢ ‚àà ‚Ñ§")
        else
            name = Symbol(MOI.get(‚Ñ≥, MOI.VariableName(), x·µ¢))
            expand‚Ñ§!(‚Ñ≥, x·µ¢; Œ±=a·µ¢, Œ≤=b·µ¢, name=name)
        end
    end

    # -*- Mirror Boolean Variables üòÑ -*-
    for x·µ¢ in ùîπ
        name = Symbol(MOI.get(‚Ñ≥, MOI.VariableName(), x·µ¢))
        mirrorùîπ!(‚Ñ≥, x·µ¢; name=name)
    end
end

# -*- Objective Function -*-
function toqubo_objective!(‚Ñ≥::VirtualQUBOModel{T}, F::Type{<:VI}) where {T}
    # -*- Single Variable -*-
    x·µ¢ = MOI.get(‚Ñ≥, MOI.ObjectiveFunction{F}())

    for (y·µ¢, c·µ¢) ‚àà ‚Ñ≥.source[x·µ¢]
        ‚Ñ≥.‚Ñç‚ÇÄ[y·µ¢] += c·µ¢
    end
end

function toqubo_objective!(‚Ñ≥::VirtualQUBOModel{T}, F::Type{<:SAF{T}}) where {T}
    # -*- Affine Terms -*-
    f = MOI.get(‚Ñ≥, MOI.ObjectiveFunction{F}())

    for a·µ¢ in f.terms
        c·µ¢ = a·µ¢.coefficient
        x·µ¢ = a·µ¢.variable

        for (y·µ¢, d·µ¢) ‚àà ‚Ñ≥.source[x·µ¢]
            ‚Ñ≥.‚Ñç‚ÇÄ[y·µ¢] += c·µ¢ * d·µ¢
        end
    end

    # -*- Constant -*-
    ‚Ñ≥.‚Ñç‚ÇÄ += f.constant
end

function toqubo_objective!(‚Ñ≥::VirtualQUBOModel{T}, F::Type{<:SQF{T}}) where {T}
    # -*- Affine Terms -*-
    f = MOI.get(‚Ñ≥, MOI.ObjectiveFunction{F}())

    # Quadratic Terms
    for Q·µ¢ in f.quadratic_terms
        c·µ¢ = Q·µ¢.coefficient
        x·µ¢ = Q·µ¢.variable_1
        x‚±º = Q·µ¢.variable_2

        for (y·µ¢, d·µ¢) ‚àà ‚Ñ≥.source[x·µ¢], (y‚±º, d‚±º) ‚àà ‚Ñ≥.source[x‚±º]
            ‚Ñ≥.‚Ñç‚ÇÄ[y·µ¢ √ó y‚±º] += c·µ¢ * d·µ¢ * d‚±º
        end
    end

    for a·µ¢ in f.affine_terms
        c·µ¢ = a·µ¢.coefficient
        x·µ¢ = a·µ¢.variable

        for (y·µ¢, d·µ¢) in ‚Ñ≥.source[x·µ¢]
            ‚Ñ≥.‚Ñç‚ÇÄ[y·µ¢] += c·µ¢ * d·µ¢
        end
    end

    # -*- Constant -*-
    ‚Ñ≥.‚Ñç‚ÇÄ += f.constant
end

# -*- Constraints -*-
function toqubo_constraint!(‚Ñ≥::VirtualQUBOModel{T}, F::Type{<: SAF{T}}, S::Type{<:EQ{T}}) where {T}
    # -*- Scalar Affine Function: Ax = b üòÑ -*-
    for c·µ¢ in MOI.get(‚Ñ≥, MOI.ListOfConstraintIndices{F, S}())
        ùïí·µ¢ = ‚Ñ±{T}()

        A·µ¢ = MOI.get(‚Ñ≥, MOI.ConstraintFunction(), c·µ¢)
        b·µ¢ = MOI.get(‚Ñ≥, MOI.ConstraintSet(), c·µ¢).value

        for a‚±º in A·µ¢.terms
            c‚±º = a‚±º.coefficient
            x‚±º = a‚±º.variable

            for (y‚±º, d‚±º) ‚àà ‚Ñ≥.source[x‚±º]
                ùïí·µ¢[y‚±º] += c‚±º * d‚±º
            end
        end

        ùïì·µ¢ = discretize(ùïí·µ¢ - b·µ¢; œµ=‚Ñ≥.œµ)

        ‚Ñç·µ¢ = reduce_degree(
            ùïì·µ¢ ^ 2;
            cache = ‚Ñ≥.cache,
            slack = () -> target(slackùîπ!(‚Ñ≥; name=:w))[1]
        )

        push!(‚Ñ≥.‚Ñç·µ¢, ‚Ñç·µ¢)
    end
end

function toqubo_constraint!(‚Ñ≥::VirtualQUBOModel{T}, F::Type{<: SAF{T}}, S::Type{<:LT{T}}) where {T}
    # -*- Scalar Affine Function: Ax <= b ü§î -*-

    for c·µ¢ in MOI.get(‚Ñ≥, MOI.ListOfConstraintIndices{F, S}())
        ùïí·µ¢ = ‚Ñ±{T}()

        A·µ¢ = MOI.get(‚Ñ≥, MOI.ConstraintFunction(), c·µ¢)
        b·µ¢ = MOI.get(‚Ñ≥, MOI.ConstraintSet(), c·µ¢).upper

        for a‚±º in A·µ¢.terms
            c‚±º = a‚±º.coefficient
            x‚±º = a‚±º.variable

            for (y‚±º, d‚±º) ‚àà ‚Ñ≥.source[x‚±º]
                ùïí·µ¢[y‚±º] += c‚±º * d‚±º
            end 
        end

        ùïì·µ¢ = discretize(ùïí·µ¢ - b·µ¢; œµ=‚Ñ≥.œµ)
    
        # -*- Introduce Slack Variable -*-
        Œ± = sum(c for (œâ, c) ‚àà ùïì·µ¢ if !isempty(œâ) && c < zero(T); init=zero(T))
        Œ≤ = - ùïì·µ¢[‚àÖ]

        ùï§·µ¢ = ‚Ñ±{T}(Dict{Set{VI}, Float64}(Set{VI}([s·µ¢]) => c for (s·µ¢, c) ‚àà slack‚Ñ§!(‚Ñ≥; Œ±=Œ±, Œ≤=Œ≤, name=:s)))

        ‚Ñç·µ¢ = reduce_degree(
            (ùïì·µ¢ + ùï§·µ¢) ^ 2;
            cache = ‚Ñ≥.cache,
            slack = () -> target(slackùîπ!(‚Ñ≥; name=:w))[1]
        )

        push!(‚Ñ≥.‚Ñç·µ¢, ‚Ñç·µ¢)
    end
end

function toqubo_constraint!(::VirtualQUBOModel, ::Type{<:VI}, ::Type{<:MOI.ZeroOne}) end