# -*- QUBO Validation -*-
@doc raw"""
    isqubo(model::MOI.ModelLike)
    
Tells if a given model is ready to be interpreted as a QUBO model.

For it to be true, a few conditions must be met:
 1. All variables must be binary (`MOI.VariableIndex ‚àà MOI.ZeroOne`)
 2. No other constraints are allowed
 3. The objective function must be of type `MOI.ScalarQuadraticFunction`, `MOI.ScalarAffineFunction` or `MOI.VariableIndex`
 4. The objective sense must be either `MOI.MIN_SENSE` or `MOI.MAX_SENSE`
"""
function isqubo(model::MOI.ModelLike)
    F = MOI.get(model, MOI.ObjectiveFunctionType())

    if !(F <: Union{SQF,SAF,VI})
        return false
    end

    S = MOI.get(model, MOI.ObjectiveSense())

    if !(S === MOI.MAX_SENSE || S === MOI.MIN_SENSE)
        return false
    end

    # List of Variables
    v = Set{VI}(MOI.get(model, MOI.ListOfVariableIndices()))

    for (F, S) in MOI.get(model, MOI.ListOfConstraintTypesPresent())
        if (F === VI && S === MOI.ZeroOne)
            for c·µ¢ in MOI.get(model, MOI.ListOfConstraintIndices{F,S}())
                v·µ¢ = MOI.get(model, MOI.ConstraintFunction(), c·µ¢)

                # Account for variable as binary
                delete!(v, v·µ¢)
            end
        else
            # Non VariableIndex-in-ZeroOne Constraint
            return false
        end
    end

    if !isempty(v)
        # Some variable is not covered by binary constraints
        return false
    end

    return true
end

isqubo(::QUBOModel) = true
isqubo(::VirtualQUBOModel) = true

# -*- toqubo: MOI.ModelLike -> QUBO.Model -*-
@doc raw"""
    toqubo(
        T::Type,
        model::MOI.ModelLike,
        optimizer::Union{Nothing, MOI.AbstractOptimizer}=nothing;
        kws...
    )
    toqubo(
        model::MOI.ModelLike,
        optimizer::Union{Nothing, MOI.AbstractOptimizer}=nothing;
        kws...
    )

Low-level interface to create a `::VirtualQUBOModel{T}` from `::MOI.ModelLike` instance. If provided, an `::MOI.AbstractOptimizer` is attached to the model.

The `tol` parameter defines the tolerance imposed for turning the problem's coefficients into integers.

!!! warning "Warning"
    Be careful with the `tol` parameter. When equal to zero, truncates all entries.
"""
function toqubo(T::Type, model::MOI.ModelLike, optimizer::Union{Nothing, MOI.AbstractOptimizer}=nothing; kws...)
    virt_model = VirtualQUBOModel{T}(optimizer; kws...)

    # -*- Copy to PreQUBOModel + Trigger Bridges -*-
    MOI.copy_to(
        MOIB.full_bridge_optimizer(virt_model.source_model, T),
        model,
    )

    # -*- Assemble Virtual Model -*-
    return toqubo!(virt_model)
end

function toqubo(model::MOI.ModelLike, optimizer::Union{Nothing, MOI.AbstractOptimizer}=nothing; kws...)
    return toqubo(Float64, model, optimizer; kws...)
end


@doc raw"""
    toqubo!(model::VirtualQUBOModel{T}) where {T}
"""
function toqubo!(model::VirtualQUBOModel{T}) where {T}
    # :: Problem Variables ::
    toqubo_variables!(model)

    # :: Objective Analysis ::
    F = MOI.get(model, MOI.ObjectiveFunctionType())

    toqubo_objective!(model, F)

    # :: Constraint Analysis ::
    for (F, S) ‚àà MOI.get(model, MOI.ListOfConstraintTypesPresent())
        toqubo_constraint!(model, F, S)
    end

    # :: Objective Sense ::
    toqubo_sense!(model)

    # -*- :: Objective Function Assembly :: -*-
    Œµ = convert(T, 1.0) # TODO: This should be made a parameter too?

    œÅ·µ¢ = Œ¥(model.‚Ñç‚ÇÄ) ./ œµ.(model.‚Ñç·µ¢; tol=model.tol) .+ Œµ

    if MOI.get(model, MOI.ObjectiveSense()) === MOI.MAX_SENSE
        œÅ·µ¢ *= -1.0
    end

    model.‚Ñç = model.‚Ñç‚ÇÄ + sum(œÅ·µ¢ .* model.‚Ñç·µ¢)

    Q = SQT{T}[]
    a = SAT{T}[]
    b = zero(T)

    for (œâ, c) in model.‚Ñç
        if length(œâ) == 0
            b += c
        elseif length(œâ) == 1
            push!(a, SAT{T}(c, œâ...))
        elseif length(œâ) == 2
            push!(Q, SQT{T}(c, œâ...))
        else
            throw(QUBOError("Quadratization failed"))
        end
    end

    MOI.set(
        model.target_model,
        MOI.ObjectiveFunction{SQF{T}}(),
        SQF{T}(Q, a, b)
    )

    return model
end

@doc raw"""
    toqubo_sense!(model::VirtualQUBOModel)

Copies `MOI.ObjectiveSense` from `model.source_model` to `model.target_model`.
"""
function toqubo_sense!(model::VirtualQUBOModel)
    MOI.set(
        model.target_model, MOI.ObjectiveSense(),
        MOI.get(
            model,
            MOI.ObjectiveSense()
        )
    )

    nothing
end

@doc raw"""
    toqubo_variables!(model::VirtualQUBOModel{T}) where {T}
"""
function toqubo_variables!(model::VirtualQUBOModel{T}) where {T}
    # ::: Variable Analysis :::

    # Set of all source variables
    Œ© = Set{VI}(MOI.get(model, MOI.ListOfVariableIndices()))

    # Variable Sets and Bounds (Boolean, Integer, Real)
    ùîπ = Set{VI}()
    ‚Ñ§ = Dict{VI, Tuple{Union{T, Nothing}, Union{T, Nothing}}}()
    ‚Ñù = Dict{VI, Tuple{Union{T, Nothing}, Union{T, Nothing}}}()

    for c·µ¢ in MOI.get(model, MOI.ListOfConstraintIndices{VI, MOI.ZeroOne}())
        # -*- Binary Variable üòÑ -*-
        x·µ¢ = MOI.get(model, MOI.ConstraintFunction(), c·µ¢)

        # Add to set
        push!(ùîπ, x·µ¢)
    end

    for c·µ¢ in MOI.get(model, MOI.ListOfConstraintIndices{VI, MOI.Integer}())
        # -*- Integer Variable ü§î -*-
        x·µ¢ = MOI.get(model, MOI.ConstraintFunction(), c·µ¢)

        # Add to dict as unbounded
        ‚Ñ§[x·µ¢] = (nothing, nothing)
    end

    for x·µ¢ in setdiff(Œ©, ùîπ, keys(‚Ñ§))
        # -*- Real Variable üò¢ -*-
        ‚Ñù[x·µ¢] = (nothing, nothing)
    end

    for c·µ¢ in MOI.get(model, MOI.ListOfConstraintIndices{VI, MOI.Interval{T}}())
        # -*- Interval üòÑ -*-
        x·µ¢ = MOI.get(model, MOI.ConstraintFunction(), c·µ¢)
        I·µ¢ = MOI.get(model, MOI.ConstraintSet(), c·µ¢) 

        a·µ¢ = I·µ¢.lower
        b·µ¢ = I·µ¢.upper

        if haskey(‚Ñ§, x·µ¢)
            ‚Ñ§[x·µ¢] = (a·µ¢, b·µ¢)
        elseif haskey(‚Ñù, x·µ¢)
            ‚Ñù[x·µ¢] = (a·µ¢, b·µ¢)
        end
    end

    for c·µ¢ in MOI.get(model, MOI.ListOfConstraintIndices{VI, LT{T}}())
        # -*- Upper Bound ü§î -*-
        x·µ¢ = MOI.get(model, MOI.ConstraintFunction(), c·µ¢)
        I·µ¢ = MOI.get(model, MOI.ConstraintSet(), c·µ¢) 

        b·µ¢ = I·µ¢.upper

        if haskey(‚Ñ§, x·µ¢)
            ‚Ñ§[x·µ¢] = (‚Ñ§[x·µ¢][1], b·µ¢)
        elseif haskey(‚Ñù, x·µ¢)
            ‚Ñù[x·µ¢] = (‚Ñù[x·µ¢][1], b·µ¢)
        end
    end

    for c·µ¢ in MOI.get(model, MOI.ListOfConstraintIndices{VI, GT{T}}())
        # -*- Lower Bound ü§î -*-
        x·µ¢ = MOI.get(model, MOI.ConstraintFunction(), c·µ¢)
        I·µ¢ = MOI.get(model, MOI.ConstraintSet(), c·µ¢)

        a·µ¢ = I·µ¢.lower

        if haskey(‚Ñ§, x·µ¢)
            ‚Ñ§[x·µ¢] = (a·µ¢, ‚Ñ§[x·µ¢][2])
        elseif haskey(‚Ñù, x·µ¢)
            ‚Ñù[x·µ¢] = (a·µ¢, ‚Ñù[x·µ¢][2])
        end
    end

    # -*- Discretize Real Ones ü§î -*-
    for (x·µ¢, (a·µ¢, b·µ¢)) in ‚Ñù
        if a·µ¢ === nothing || b·µ¢ === nothing
            error("Unbounded variable $x·µ¢ ‚àà ‚Ñù")
        else
            # bits = 3
            # TODO: Solve this bit-guessing magic???
            # IDEA: 
            #     Let xÃÇ ~ U[a, b], K = 2·¥∫, Œ≥ = [a, b]
            #       ùîº[|x·µ¢ - xÃÇ|] = ‚à´·µß |x·µ¢ - xÃÇ| f(xÃÇ) dxÃÇ
            #                   = 1 / |b - a| ‚à´·µß |x·µ¢ - xÃÇ| dxÃÇ
            #                   = |b - a| / 4 (K - 1)
            #
            #     For ùîº[|x·µ¢ - xÃÇ|] ‚â§ œÑ we have
            #       N ‚â• log‚ÇÇ(1 + |b - a| / 4œÑ)
            #
            # where œÑ is the (absolute) tolerance
            œÑ = 0.25 # TODO: Add œÑ as parameter
                    
            bits = ceil(Int, log2(1 + abs(b·µ¢ - a·µ¢) / 4œÑ))
            name = Symbol(MOI.get(model, MOI.VariableName(), x·µ¢))
            expand‚Ñù!(model, x·µ¢; Œ±=a·µ¢, Œ≤=b·µ¢, name=name, bits=bits)
        end
    end

    # -*- Discretize Integer Variables ü§î -*-
    for (x·µ¢, (a·µ¢, b·µ¢)) in ‚Ñ§
        if a·µ¢ === nothing || b·µ¢ === nothing
            error("Unbounded variable $x·µ¢ ‚àà ‚Ñ§")
        else
            name = Symbol(MOI.get(model, MOI.VariableName(), x·µ¢))
            expand‚Ñ§!(model, x·µ¢; Œ±=a·µ¢, Œ≤=b·µ¢, name=name)
        end
    end

    # -*- Mirror Boolean Variables üòÑ -*-
    for x·µ¢ in ùîπ
        name = Symbol(MOI.get(model, MOI.VariableName(), x·µ¢))
        mirrorùîπ!(model, x·µ¢; name=name)
    end

    nothing
end

@doc raw"""
    toqubo_objective!(model::VirtualQUBOModel{T}, F::Type{<:VI}) where {T}
    toqubo_objective!(model::VirtualQUBOModel{T}, F::Type{<:SAF{T}}) where {T}
    toqubo_objective!(model::VirtualQUBOModel{T}, F::Type{<:SQF{T}}) where {T}
"""
function toqubo_objective!(model::VirtualQUBOModel{T}, F::Type{<:VI}) where {T}
    # -*- Single Variable -*-
    x·µ¢ = MOI.get(model, MOI.ObjectiveFunction{F}())

    for (œâ·µ¢, c·µ¢) ‚àà model.source[x·µ¢]
        model.‚Ñç‚ÇÄ[œâ·µ¢] += c·µ¢
    end
end

function toqubo_objective!(model::VirtualQUBOModel{T}, F::Type{<:SAF{T}}) where {T}
    # -*- Affine Terms -*-
    f = MOI.get(model, MOI.ObjectiveFunction{F}())

    for a·µ¢ in f.terms
        c·µ¢ = a·µ¢.coefficient
        x·µ¢ = a·µ¢.variable

        for (œâ·µ¢, d·µ¢) ‚àà model.source[x·µ¢]
            model.‚Ñç‚ÇÄ[œâ·µ¢] += c·µ¢ * d·µ¢
        end
    end

    # -*- Constant -*-
    model.‚Ñç‚ÇÄ += f.constant
end

function toqubo_objective!(model::VirtualQUBOModel{T}, F::Type{<:SQF{T}}) where {T}
    # -*- Affine Terms -*-
    f = MOI.get(model, MOI.ObjectiveFunction{F}())

    # Quadratic Terms
    for Q·µ¢ ‚àà f.quadratic_terms
        c·µ¢ = Q·µ¢.coefficient
        x·µ¢ = Q·µ¢.variable_1
        x‚±º = Q·µ¢.variable_2

        for (œâ·µ¢, d·µ¢) ‚àà model.source[x·µ¢], (œâ‚±º, d‚±º) ‚àà model.source[x‚±º]
            model.‚Ñç‚ÇÄ[œâ·µ¢ √ó œâ‚±º] += c·µ¢ * d·µ¢ * d‚±º
        end
    end

    for a·µ¢ ‚àà f.affine_terms
        c·µ¢ = a·µ¢.coefficient
        x·µ¢ = a·µ¢.variable

        for (œâ·µ¢, d·µ¢) in model.source[x·µ¢]
            model.‚Ñç‚ÇÄ[œâ·µ¢] += c·µ¢ * d·µ¢
        end
    end

    # -*- Constant -*-
    model.‚Ñç‚ÇÄ += f.constant
end

@doc raw"""
    toqubo_constraint!(model::VirtualQUBOModel{T}, F::Type{<:SAF{T}}, S::Type{<:EQ{T}}) where {T}
    toqubo_constraint!(model::VirtualQUBOModel{T}, F::Type{<:SAF{T}}, S::Type{<:LT{T}}) where {T}
    toqubo_constraint!(model::VirtualQUBOModel{T}, F::Type{<:SQF{T}}, S::Type{<:EQ{T}}) where {T}
    toqubo_constraint!(model::VirtualQUBOModel{T}, F::Type{<:SQF{T}}, S::Type{<:LT{T}}) where {T}
    toqubo_constraint!(::VirtualQUBOModel{T}, ::Type{<:VI}, ::Type{<:Union{MOI.ZeroOne, MOI.Integer, MOI.Interval{T}, MOI.LessThan{T}, MOI.GreaterThan{T}}}) where {T}
"""
function toqubo_constraint!(model::VirtualQUBOModel{T}, F::Type{<:SAF{T}}, S::Type{<:EQ{T}}) where {T}
    # -*- Scalar Affine Function: Ax = b üòÑ -*-
    for c·µ¢ in MOI.get(model, MOI.ListOfConstraintIndices{F, S}())
        g·µ¢ = ‚Ñ±{T}()

        A·µ¢ = MOI.get(model, MOI.ConstraintFunction(), c·µ¢)
        b·µ¢ = MOI.get(model, MOI.ConstraintSet(), c·µ¢).value

        for a‚±º ‚àà A·µ¢.terms
            c‚±º = a‚±º.coefficient
            x‚±º = a‚±º.variable

            for (y‚±º, d‚±º) ‚àà model.source[x‚±º]
                g·µ¢[y‚±º] += c‚±º * d‚±º
            end
        end

        g·µ¢ = PBO.discretize((g·µ¢ - b·µ¢) ^ 2; tol=model.tol)
        h·µ¢ = PBO.quadratize(g·µ¢; slack = add_slack(model))

        push!(model.‚Ñç·µ¢, h·µ¢)
    end

    nothing
end

function toqubo_constraint!(model::VirtualQUBOModel{T}, F::Type{<:SAF{T}}, S::Type{<:LT{T}}) where {T}
    # -*- Scalar Affine Function: Ax <= b ü§î -*-

    for c·µ¢ in MOI.get(model, MOI.ListOfConstraintIndices{F, S}())
        g·µ¢ = ‚Ñ±{T}()

        A·µ¢ = MOI.get(model, MOI.ConstraintFunction(), c·µ¢)
        b·µ¢ = MOI.get(model, MOI.ConstraintSet(), c·µ¢).upper

        for a‚±º ‚àà A·µ¢.terms
            c‚±º = a‚±º.coefficient
            x‚±º = a‚±º.variable

            for (y‚±º, d‚±º) ‚àà model.source[x‚±º]
                g·µ¢[y‚±º] += c‚±º * d‚±º
            end
        end

        g·µ¢ = PBO.discretize(g·µ¢ - b·µ¢; tol=model.tol)
    
        # -*- Introduce Slack Variable -*-
        Œ±·µ¢ = sum(c for (œâ, c) ‚àà g·µ¢ if !isempty(œâ) && c < zero(T); init=zero(T))
        Œ≤·µ¢ = -g·µ¢[nothing]

        s·µ¢ = ‚Ñ±{T}(collect(slack‚Ñ§!(model; Œ±=Œ±·µ¢, Œ≤=Œ≤·µ¢, name=:s)))
        h·µ¢ = PBO.quadratize((g·µ¢ + s·µ¢) ^ 2;slack = add_slack(model))

        push!(model.‚Ñç·µ¢, h·µ¢)
    end

    nothing
end

function toqubo_constraint!(model::VirtualQUBOModel{T}, F::Type{<:SQF{T}}, S::Type{<:EQ{T}}) where {T}
    # -*- Scalar Quadratic Function: x Q x + a x = b üò¢ -*-
    for c·µ¢ in MOI.get(model, MOI.ListOfConstraintIndices{F, S}())
        g·µ¢ = ‚Ñ±{T}()

        f·µ¢ = MOI.get(model, MOI.ConstraintFunction(), c·µ¢)
        b·µ¢ = MOI.get(model, MOI.ConstraintSet(), c·µ¢).value

        for Q‚±º ‚àà f·µ¢.quadratic_terms
            c‚±º = Q‚±º.coefficient
            x‚±º = Q‚±º.variable_1
            y‚±º = Q‚±º.variable_2

            for (œâ‚±º, d‚±º) ‚àà model.source[x‚±º], (Œ∑‚±º, e‚±º) ‚àà model.source[y‚±º]
                g·µ¢[œâ‚±º √ó Œ∑‚±º] += c‚±º * d‚±º * e‚±º
            end
        end

        for a‚±º ‚àà f·µ¢.affine_terms
            c‚±º = a‚±º.coefficient
            x‚±º = a‚±º.variable

            for (œâ‚±º, d‚±º) ‚àà model.source[x‚±º]
                g·µ¢[œâ‚±º] += c‚±º * d‚±º
            end
        end

        g·µ¢ = PBO.discretize((g·µ¢ - b·µ¢) ^ 2; tol=model.tol)
        h·µ¢ = PBO.quadratize(g·µ¢; slack = add_slack(model))

        push!(model.‚Ñç·µ¢, h·µ¢)
    end

    nothing
end

function toqubo_constraint!(model::VirtualQUBOModel{T}, F::Type{<:SQF{T}}, S::Type{<:LT{T}}) where {T}
    # -*- Scalar Quadratic Function: x Q x + a x = b üò¢ -*-
    for c·µ¢ in MOI.get(model, MOI.ListOfConstraintIndices{F, S}())
        g·µ¢ = ‚Ñ±{T}()

        f·µ¢ = MOI.get(model, MOI.ConstraintFunction(), c·µ¢)
        b·µ¢ = MOI.get(model, MOI.ConstraintSet(), c·µ¢).value

        for Q‚±º ‚àà f·µ¢.quadratic_terms
            c‚±º = Q‚±º.coefficient
            x‚±º = Q‚±º.variable_1
            y‚±º = Q‚±º.variable_2

            for (œâ‚±º, d‚±º) ‚àà model.source[x‚±º], (Œ∑‚±º, e‚±º) ‚àà model.source[y‚±º]
                g·µ¢[œâ‚±º √ó Œ∑‚±º] += c‚±º * d‚±º * e‚±º
            end
        end

        for a‚±º ‚àà f·µ¢.affine_terms
            c‚±º = a‚±º.coefficient
            x‚±º = a‚±º.variable

            for (œâ‚±º, d‚±º) ‚àà model.source[x‚±º]
                g·µ¢[œâ‚±º] += c‚±º * d‚±º
            end
        end

        g·µ¢ = PBO.discretize((g·µ¢ - b·µ¢) ^ 2; tol=model.tol)

        # -*- Introduce Slack Variable -*-
        Œ±·µ¢ = sum(c for (œâ, c) ‚àà g·µ¢ if !isempty(œâ) && c < zero(T); init=zero(T))
        Œ≤·µ¢ = -g·µ¢[nothing]

        s·µ¢ = ‚Ñ±{T}(collect(slack‚Ñ§!(model; Œ±=Œ±·µ¢, Œ≤=Œ≤·µ¢, name=:s)))
        h·µ¢ = PBO.quadratize((g·µ¢ + s·µ¢) ^ 2;slack = add_slack(model))

        push!(model.‚Ñç·µ¢, h·µ¢)
    end
end

function toqubo_constraint!(
    ::VirtualQUBOModel{T},
    ::Type{<:VI},
    ::Type{<:Union{MOI.ZeroOne, MOI.Integer, MOI.Interval{T}, MOI.LessThan{T}, MOI.GreaterThan{T}}}
) where {T} end