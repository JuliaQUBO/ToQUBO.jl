function variables!(model::Virtual.Model{T}, ::AbstractArchitecture) where {T}
    # Set of all source variables
    Œ© = Vector{VI}(MOI.get(model, MOI.ListOfVariableIndices()))

    # Variable Sets and Bounds (Boolean, Integer, Real)
    ùîπ = Vector{VI}()
    ‚Ñ§ = Dict{VI,Tuple{Union{T,Nothing},Union{T,Nothing}}}()
    ‚Ñù = Dict{VI,Tuple{Union{T,Nothing},Union{T,Nothing}}}()

    for ci in MOI.get(model, MOI.ListOfConstraintIndices{VI,MOI.ZeroOne}())
        # Binary Variable
        x = MOI.get(model, MOI.ConstraintFunction(), ci)

        # Add to set
        push!(ùîπ, x)
    end

    for ci in MOI.get(model, MOI.ListOfConstraintIndices{VI,MOI.Integer}())
        # Integer Variable
        x = MOI.get(model, MOI.ConstraintFunction(), ci)

        # Add to dict as unbounded
        ‚Ñ§[x] = (nothing, nothing)
    end

    for x in setdiff(Œ©, ùîπ, keys(‚Ñ§))
        # Real Variable
        ‚Ñù[x] = (nothing, nothing)
    end

    for ci in MOI.get(model, MOI.ListOfConstraintIndices{VI,MOI.Interval{T}}())
        # Interval
        x = MOI.get(model, MOI.ConstraintFunction(), ci)
        s = MOI.get(model, MOI.ConstraintSet(), ci)

        a = s.lower
        b = s.upper

        if haskey(‚Ñ§, x)
            ‚Ñ§[x] = (a, b)
        elseif haskey(‚Ñù, x)
            ‚Ñù[x] = (a, b)
        end
    end

    for ci in MOI.get(model, MOI.ListOfConstraintIndices{VI,LT{T}}())
        # Upper Bound
        x = MOI.get(model, MOI.ConstraintFunction(), ci)
        s = MOI.get(model, MOI.ConstraintSet(), ci)

        b = s.upper

        if haskey(‚Ñ§, x)
            ‚Ñ§[x] = (first(‚Ñ§[x]), b)
        elseif haskey(‚Ñù, x)
            ‚Ñù[x] = (first(‚Ñù[x]), b)
        end
    end

    for ci in MOI.get(model, MOI.ListOfConstraintIndices{VI,GT{T}}())
        # Lower Bound
        x = MOI.get(model, MOI.ConstraintFunction(), ci)
        s = MOI.get(model, MOI.ConstraintSet(), ci)

        a = s.lower

        if haskey(‚Ñ§, x)
            ‚Ñ§[x] = (a, last(‚Ñ§[x]))
        elseif haskey(‚Ñù, x)
            ‚Ñù[x] = (a, last(‚Ñù[x]))
        end
    end

    # Discretize Real Ones
    for (x, (a, b)) in ‚Ñù
        if isnothing(a) || isnothing(b)
            error("Unbounded variable $(x) ‚àà ‚Ñù")
        else
            # TODO: Solve this bit-guessing magic???
            # IDEA: 
            #     Let xÃÇ ~ U[a, b], K = 2·¥∫, Œ≥ = [a, b]
            #       ùîº[|x·µ¢ - xÃÇ|] = ‚à´·µß |x·µ¢ - xÃÇ| f(xÃÇ) dxÃÇ
            #                   = 1 / |b - a| ‚à´·µß |x·µ¢ - xÃÇ| dxÃÇ
            #                   = |b - a| / 4 (K - 1)
            #
            #     For ùîº[|x·µ¢ - xÃÇ|] ‚â§ œÑ we have
            #       N ‚â• log‚ÇÇ(1 + |b - a| / 4œÑ)
            #
            # where œÑ is the (absolute) tolerance
            # TODO: Add œÑ as parameter (DONE)
            # TODO: Move this comment to the documentation
            let
                e = Attributes.variable_encoding_method(model, x)
                n = Attributes.variable_encoding_bits(model, x)

                if !isnothing(n)
                    encode!(model, e, x, n, (a, b))
                else
                    œÑ = Attributes.variable_encoding_atol(model, x)

                    encode!(model, e, x, (a, b), œÑ)
                end
            end
        end
    end

    # Discretize Integer Variables 
    for (x, (a, b)) in ‚Ñ§
        if isnothing(a) || isnothing(b)
            error("Unbounded variable $(x) ‚àà ‚Ñ§")
        else
            let
                e = Attributes.variable_encoding_method(model, x)

                encode!(model, e, x, (a, b))
            end
        end
    end

    # Mirror Boolean Variables
    for x in ùîπ
        encode!(model, Mirror{T}(), x)
    end

    return nothing
end

function variable(model::Virtual.Model, ::AbstractArchitecture) end
