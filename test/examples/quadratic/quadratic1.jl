function test_quadratic1()
    @testset "3 variables, 1 constraint" begin
        # ~*~ Problem Data ~*~ #
        n = 3
        A = [
            -1  2  2
             2 -1  2
             2  2 -1
        ]
        b = 6

        # Penalty Choice
        ρ̄ = -16

        # ~*~ Solution Data ~*~ #
        Q̄ = [
            -209  370  370   16   32   64   32 -256    0    0    0  -576 -256    0  -64 -128 -128 -128 -128  -64
             370 -209 -206  -48  -96 -192  -96  256 -128 -256 -128   576    0  -64    0    0    0  128  128   64
             370 -206 -209 -112 -224 -448 -224    0  128  256  128   576  256   64   64  128  128    0    0    0
              16  -48 -112  176  -32  -64  -32    0    0    0    0     0    0   64   64    0    0    0    0   64
              32  -96 -224  -32  320 -128  -64    0  128    0    0     0    0    0    0  128    0  128    0    0
              64 -192 -448  -64 -128  512 -128  256    0  256    0     0  256    0    0    0    0    0    0    0
              32  -96 -224  -32  -64 -128  320    0    0    0  128     0    0    0    0    0  128    0  128    0
            -256  256    0    0    0  256    0 -512    0    0    0     0    0    0    0    0    0    0    0    0
               0 -128  128    0  128    0    0    0 -256    0    0     0    0    0    0    0    0    0    0    0
               0 -256  256    0    0  256    0    0    0 -512    0     0    0    0    0    0    0    0    0    0
               0 -128  128    0    0    0  128    0    0    0 -256     0    0    0    0    0    0    0    0    0
            -576  576  576    0    0    0    0    0    0    0    0 -1152    0    0    0    0    0    0    0    0
            -256    0  256    0    0  256    0    0    0    0    0     0 -512    0    0    0    0    0    0    0
               0  -64   64   64    0    0    0    0    0    0    0     0    0 -128    0    0    0    0    0    0
             -64    0   64   64    0    0    0    0    0    0    0     0    0    0 -128    0    0    0    0    0
            -128    0  128    0  128    0    0    0    0    0    0     0    0    0    0 -256    0    0    0    0
            -128    0  128    0    0    0  128    0    0    0    0     0    0    0    0    0 -256    0    0    0
            -128  128    0    0  128    0    0    0    0    0    0     0    0    0    0    0    0 -256    0    0
            -128  128    0    0    0    0  128    0    0    0    0     0    0    0    0    0    0    0 -256    0
             -64   64    0   64    0    0    0    0    0    0    0     0    0    0    0    0    0    0    0 -128
        ]

        c̄ = -576

        x̄ = Set{Vector{Int}}([
            [0, 1, 1],
            [1, 0, 1],
            [1, 1, 0]
        ])

        ȳ = 2

        # ~*~ Model ~*~ #
        model = Model(() -> ToQUBO.Optimizer(ExactSampler.Optimizer))

        @variable(model, x[1:n], Bin)
        @objective(model, Max, x'A * x)
        @constraint(model, x'A * x <= b)

        optimize!(model)

        Q, _, c = ToQUBO.qubo(unsafe_backend(model))

        ρ = last.(collect(vqm.ρ))

        # :: Reformulation ::
        @test all(ρ .== ρ̄)

        @test c ≈ c̄
        @test Q ≈ Q̄

        # :: Solutions ::
        x̂ = trunc.(Int, value.(x))
        ŷ = objective_value(model)

        @test x̂ ∈ x̄
        @test ŷ ≈ ȳ
    end
end